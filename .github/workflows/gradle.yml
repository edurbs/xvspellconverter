# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: 
      - main
env:
  BUILD_NUMBER: ${{ github.run_number }}
  
jobs:

  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Build with Gradle Wrapper
      run: ./gradlew build
      
    - name: Create Deployment Bundle
      run: |
          mkdir -p deployment/target
          cp -r codedeploy/* deployment/
          cp target/xvspellconverter-0.0.1-SNAPSHOT.jar deployment/target/
          zip -r deployment-$BUILD_NUMBER.zip deployment

    - name: Publish Deployment Artifact
      uses: actions/upload-artifact@v4
      with:
        name: deployment-artifact
        path: ${{github.workspace}}/deployment-${{ github.run_number }}.zip

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
    #   with:
    #     gradle-version: '8.5'
    #
    # - name: Build with Gradle 8.5
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

  deploy:  
    needs: [build]
    name: Deploy to Production Environment
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Download Deployment Artifact
        uses: actions/download-artifact@v4
        with:
          name: deployment-artifact

      - name: Check Deployment Artifact
        run: |
          if [ ! -f ./deployment-$BUILD_NUMBER.zip ]; then
            echo "Error: Deployment artifact not found. Make sure it is created in the build job."
            exit 1
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}
          role-session-name: githubactionsession
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to AWS CodeDeploy
        run: |
          aws s3 cp deployment-$BUILD_NUMBER.zip s3://${{ vars.CODE_DEPLOY_BUCKET }}/api/deployment-$BUILD_NUMBER.zip

          deploymentId=$(aws deploy create-deployment \
              --application-name ${{ vars.CODE_DEPLOY_APPLICATION }} \
              --deployment-group-name ${{ vars.CODE_DEPLOY_GROUP }} \
              --s3-location bucket=${{ vars.CODE_DEPLOY_BUCKET }},key=api/deployment-$BUILD_NUMBER.zip,bundleType=zip \
              --file-exists-behavior OVERWRITE \
              --description "Staging api-backend deployment - $BUILD_NUMBER" --region ${{ secrets.AWS_REGION }} | jq -r '.deploymentId')

          # check deployment status
          deploymentStatus=""
          while : ; do
            status=$(aws deploy get-deployment --deployment-id $deploymentId --region ${{ secrets.AWS_REGION }} | jq -r '.deploymentInfo.status')

            if [ "$status" != "Created" ] && [ "$status" != "InProgress" ] && [ "$status" != "Pending" ]; then
              if [ "$status" == "Succeeded" ]; then
                echo "Deployment Successful"
                export deploymentStatus=0
                break
              else
                export deploymentStatus=1
                echo "Deployment failed. Check the AWS Codedeploy for more information"
                break
              fi
            fi

            sleep 10
          done
          exit $deploymentStatus
